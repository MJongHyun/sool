# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Set everything to be logged to the console
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.err
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n

# Set the default spark-shell log level to WARN. When running the spark-shell, the
# log level for this class is used to overwrite the root logger's log level, so that
# the user can have different defaults for the shell and regular Spark apps.
log4j.logger.org.apache.spark.repl.Main=WARN

# Settings to quiet third party logs that are too verbose
log4j.logger.org.spark_project.jetty=WARN
log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle=ERROR
log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper=INFO
log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter=INFO
log4j.logger.org.apache.parquet=ERROR
log4j.logger.parquet=ERROR

# SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support
log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler=FATAL
log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry=ERROR

# 2021.09.07, , 로그 파일 저장 및 콘솔에서 로그가 출력되도록 설정

# Set everything to be logged to the File
log4j.appender.appOutLog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.appOutLog.Append=true
log4j.appender.appOutLog.DatePattern='.'yyyy-MM-dd
log4j.appender.appOutLog.File=/home/ubuntu/jar/sool/sool_log/${vm.logging.name}_out.log
log4j.appender.appOutLog.layout=org.apache.log4j.PatternLayout
log4j.appender.appOutLog.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] [%p] %m%n

# Set everything to be logged to the File
log4j.appender.appRunLog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.appRunLog.Append=true
log4j.appender.appRunLog.DatePattern='.'yyyy-MM-dd
log4j.appender.appRunLog.File=/home/ubuntu/jar/sool/sool_log/${vm.logging.name}_run.log
log4j.appender.appRunLog.layout=org.apache.log4j.PatternLayout
log4j.appender.appRunLog.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] [%p] %m%n

# Set everything to be logged to the File
log4j.appender.RollingFileAppender=org.apache.log4j.rolling.RollingFileAppender
log4j.appender.RollingFileAppender.File=/home/ubuntu/jar/sool/sool_log/size_rolling.log
log4j.appender.RollingFileAppender.MaxFileSize=2MB
log4j.appender.RollingFileAppender.MaxBackupIndex=3
log4j.appender.RollingFileAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingFileAppender.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p] %m%n

# 2021.09.07, , 맨 아래 log4j.rootLogger 랑 같은 기능 같아서 주석함.
#log4j.rootCategory=INFO, appRunLog

# 전체 로그에 해당하는 것으로 추정됨
log4j.rootLogger=INFO, appRunLog

# myLogger 로 추정됨
log4j.logger.myLogger=INFO, console, appOutLog
